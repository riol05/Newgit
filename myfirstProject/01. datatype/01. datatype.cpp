// 01. datatype.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
// 프로그램은 엮어 놓은게 솔루션
// 솔루션 안에 프로그램들이 있다.


#include <iostream>
#include <string>

using namespace std;

int main()
{
    /**************************************************************
     * 자료형 (Data Type)
     *
     * 자료(데이터)의 형태를 지정
     * 데이터가 메모리에 저장되는 형태와 처리되는 방식을 명시하는 역할
     * 0과 1만으로 구성된 컴퓨터에게 여러 형태의 자료를 저장하기 위함
     **************************************************************/


     /*
    int value = 10;//숫자 저장
    string str = "asdqwe";// 문자저장
    bool b = false;// true false를 저장
    float f = 2.3;// 소수점 저장소
    */

     // <자료형 종류>
     // 자료형 이름       자료형 형태      메모리 크기      표현 범위
     // - 논리형 -
     // bool             논리 자료형      1byte           true, false /.0이 아니면 true 0은 false
     //
     // - 정수형 -
     // short            부호있는 정수     2byte           -2^15 ~ +2^15 - 1   // short level = 1~600;이 보통 작은 숫자를 저장하기 위함 메모리가 낮을경우 빠르다. 높을경우 느림.
     // int              부호있는 정수     4byte           -2^31 ~ +2^31 - 1   // int damage = 1억; 제일 보편적. 왠만하면 int로 저장하자 (시대가 발전할경우 점점 크기가 커진다.)
     // long             부호있는 정수     4byte           -2^63 ~ +2^63 - 1   // long playTime = 100억; long은 높은 숫자를 저장하기 위함 // c#에서는 8바이트
     // longlong                           8byte
     // unsigned short   부호없는 정수     2byte           0 ~ +2^32 - 1 //언사인에 저장하면 unsigned int = +100; 으로 할시 음수로 내려가지 못함. 
     // unsigned int     부호없는 정수     4byte           0 ~ +2^32 - 1
     // unsigned long    부호없는 정수     4byte           0 ~ +2^32 - 1
     //
     // - 실수형 -
     // float            부동소수점 실수   4byte           3.4e-38  ~ 3.4e+38 // float = 0.000001;
     // double           부동소수점 실수   8byte           1.7e-308 ~ 1.7e+308 // double = 0.000000001; 역시 double은 느려서 보편적으로 float를 사용함. // 정밀하게 표현할때는 double
     //
     // 
     // - 문자형
     // char             문자             1byte           'a', 'b', ...//char c = 'w'; char는 문자 하나만 쓰며 따옴표 사용 // w,s,a,d
     // string           문자열           X                "abcd", ...// string name = "홍길동"; string 은 문자열로 저장 쌍따옴표 사용 string name = 123123; 으로 할시 더하기 빼기가 가능

    /*****************************************************************
    * 변수 (variable)
    *
    * 데이터를 저장하기 위해 프로그램에 의해 이름을 할당받은 메모리 공간
    * 데이터를 저장할 수 있는 메모리 공간을 의미하며, 저장된 값은 변경 가능
    ******************************************************************/
//    int damage = 20;
//    int defense = 10;
//    int level = 3; 이름으로 저장소에 저장하는게 가장 효과적
//    string id = "cys1006";
//     string id;
//     id = "cys1006";
//    string name = "윤식";
//    저장할땐 a나 b 같이 보고 애매하게 저장하는게 아닌 damage 나 defense 처럼 명확하게 저장하기.

    //int prev = 0;
    // int cur = prev;
    // cur = 10;
    // 이렇게 쓰면 저장소를 두개를 사용하여 과거와 현재의 데이터를 전부 가져갈수있다.

    // <변수 선언 및 초기화>
    // 자료형을 선언하고 빈칸 뒤에 변수이름을 작성하여 변수 선언
    // 변수 선언과 동시에 초기화 과정을 진행할 수 있음
    int iValue = 10;   //변수선언     // int 자료형의 이름이 iValue인 변수에 10의 데이터를 초기화
    float fValue;           // float 자료형의 이름이 fValue인 변수를 선언하지만 값을 초기화하지 않음
    // int iValue;          // error : 중복된 이름의 변수는 사용불가
    // cout << fValue;      // error : 선언한 변수에 값을 초기화하기 전까지 사용불가

    // <변수에 데이터 저장>
    // =(대입연산자) 좌측에 변수를 배치
    iValue = 5;             // iValue 변수에 5의 데이터 저장
    fValue = 1.2f;          // fValue 변수에 1.2 데이터를 초기화
    cout << "iValue 변수에 보관된 데이터는 " << iValue << " 입니다." << endl;
    cout << "fValue 변수에 보관된 데이터는 " << fValue << " 입니다." << endl;

    // <변수의 데이터 불러오기>
    // 데이터가 필요한 곳에 변수명을 배치
    int rValue = 20;
    int lValue = rValue;
    cout << "rValue 변수에 보관된 데이터는 " << rValue << " 입니다." << endl;
    cout << "lValue 변수에 보관된 데이터는 " << lValue << " 입니다." << endl;

    /*****************************************************************
    * 상수 (Constant)
    * //const int num = 100; 이 이후로는 수정할수 없는 데이터
    * 프로그램이 실행되는 동안 변경할 수 없는 데이터
    * 프로그램에서 값이 변경되기를 원하지 않는 데이터가 있을 경우 사용
    * 저장된 값은 변경 불가능
    * 
    * const 와 define 은 define은 괄호가 없음 const 는 괄호가 들어감 //define은 문법에 안맞게 가능함, 매크로이기 때문에. define 은 문제를 만들수 있지만, 사용자에 따라 다른 용도로 사용가능. 
    ******************************************************************/

    // <상수 선언 및 초기화>
    // 변수 선언 앞에 const 키워드를 추가하여 상수 선언
    const int MAX = 200;        // MAX 상수 변수를 선언하고 초기화
    cout << "MAX 상수에 보관된 데이터는 " << MAX << " 입니다." << endl;
    // const int MIN;           // error : 상수는 초기화 없이 사용불가// 수정 할수 없는 데이터 인데 초기화 작업을 해주지 않아 사용불가
    // MAX = 20                 // error : 상수의 데이터 변경 불가// 변수를 사용할때 소문자로 시작하는 방식을 사용. maxPlayerCount 단어 사이사이에 대문자를 넣어줌(프로그래머들의 약속)
    // 하지만 함수를 할땐 void MaxPlayer; 식으로 맨 앞부터 대문자 사용 상수는 const int MAX = 10; 대문자만 이게 카멜식 표기법

     /*****************************************************************
     * 형변환 (Casting)
     *
     * 데이터를 선언한 자료형에 맞는 형태로 변환하는 작업
     * C++의 자료형은
     * 다른 자료형의 데이터를 저장하기 위해선 형변환 과정을 거쳐야하며,
     * 이 과정에서 보관할 수 없는 데이터는 버려짐
     ******************************************************************/

     // <명시적 형변환>
     // 변환할 데이터의 앞에 변환할 자료형을 괄호안에 넣어 형변환 진행
    float floatValue = (float)3; //이경우엔 묵시적 형변환을 사용해도 문제 없음    // 형변환을 통해 데이터 변환, 3을 float로 변환한 3.0f가 저장
    int intValue = (int)1.2;        // 1.2를 int로 변환하는 과정 중 보관할 수 없는 소수점이 버려짐. 의도하는 경우 명시적 형변환
    cout << "float 변수에 3을 형변환하여 집어넣은 데이터는 " << floatValue << " 입니다." << endl;
    cout << "int 변수에 1.2를 형변환하여 집어넣은 데이터는 " << intValue << " 입니다." << endl;

    // <묵시적 형변환>
    // 변수에 데이터를 넣는 과정에서 자료형이 다른 경우 자동으로 형변환을 진행
    // 이 때, 데이터의 손실을 최소화하는 방향으로 형변환을 진행
    // 하지만, 자료형이 표현할 수 없는 범위의 데이터인 경우 원하지 않는 데이터가 표현될 수 있음
    int num1 = 3.14; //int num1 =(int) 3.14; 이경우 명시적 형변환을 해준다.             // 주의! 의도하지 않은 경우 소수점 데이터의 손실을 주의해야함
    int num2 = 8.3e12;          // int 자료형이 표현이 불가한 크기의 데이터 표현은 예상할 수 없음
    double num3 = 5;            // 실수형 자료형이 표현할 수 있는 범위의 데이터는 손실없이 저장 가능

    cout << "정수형 자료형으로 나눗셈을 진행하는 경우 : " << 1 / 4 << endl;           // 소수점이 버려진 0
    cout << "실수형 자료형으로 나눗셈을 진행하는 경우 : " << 1.0 / 4.0 << endl;       // 소수점이 있는 0.25
    cout << "정수형 자료형을 형변환 한 후 진행하는 경우 : " << (double)1 / 4 << endl; // 소수점이 있는 0.25

    // <문자 형변환과 아스키코드>
    // 아스키코드 : 이진법을 사용하는 컴퓨터에서 문자를 표현하기 위해 정해둔 문자와 숫자의 매칭표
    //유니코드 : 요즘은 국제적인 매칭표인 유니코드를 사용한다. 주로 C#에서 사용
    cout << "아스키코드 65는 " << (char)65 << " 로 표현합니다." << endl;
    cout << "문자 'a'는 " << (int)'a' << " 로 저장합니다." << endl;

    // <문자열 형변환>  #include <string> 헤더 파일을 이용하지 않으면 string 기능을 사용할수 없다.
    // 문자열의 경우 string 헤더의 함수를 이용하여 형변환 진행
    // 문자열 형변환 과정 중 형변환이 불가능한 경우 예외처리가 발생
    cout << stoi("123") << endl;    // stoi : string을 int로 변환 string to int
    cout << stof("3.1") << endl;    // stof : string을 float로 변환 string to float 
    cout << stod("5.4") << endl;    // stod : string을 double로 변환 string to double
    // cout << stoi("abc");         // error : 형변환이 불가능한 문자열의 경우 예외처리 발생

    cout << to_string(123) << endl; // to_string : 다른 자료형의 데이터를 string으로 변환 // 숫자 형태의 데이터를 문자 형태로 변환
    cout << to_string(3.1) << endl; 
    string text = to_string(123);
    
}