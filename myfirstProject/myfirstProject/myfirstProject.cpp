
/***********************************************
 * 주석 (Comment)
 *
 * 소스 코드에 영향을 주지 않는 텍스트
 * 소스 코드에 대한 의도를 설명하기 위한 용도로 사용
 ***********************************************/

 // <주석 종류>
 //  //      : 한줄 주석 : // 이후 텍스트를 주석으로 취급
 //  /**/    : 범위 주석 : 시작(/*)에서 끝(*/)까지 텍스트를 주석으로 취급
 //  ///     : 문서 주석 : 함수 또는 클래스 앞에서 /// 입력으로 자동완성 및 통합개발환경(IDE)에서 정보표시기능
// int 는 뒤에 // 주석을 넣어줌으로써 문서 주석이 가능하다.


 /*******************************************************************************
  * 전처리기 (Precompiler)
  *
  * 소스 코드 중에서 #으로 시작하는 지시문을 컴파일 이전단계에 처리진행
  * 프로그램의 처리를 지정하는 것이 아닌, 컴파일 이전에 소스를 재구성해주는 역할만 진행
  * ********************************************************************************/
// <include>
// include 지시문에 포함한 헤더 파일의 내용을 현재 파일에 포함
// 이미 구현한 기능을 현재 파일에서 필요로 하는 경우에 사용
// <> : 시스템 헤더에서 사용 (C++을 설치한 폴더에서 헤더 파일을 찾음)
// "" : 유저의 헤더에서 사용 (프로젝트 폴더에서 헤더 파일을 찾음)

// <define>
// define 지시문에 포함한 식별자를 정의한 내용으로 대체하는 매크로
// 반복해서 작성할 내용을 대체하기 위한 기능
// 단순 대체이기 때문에 괄호, 세미콜론 사용에 주의


/*
#define SIZE 1024
#define HELLO(text) std::cout << "Hello " << text << std::endl
*/

#include <iostream> // 지시문./ #이 붙으면 전처리를 해주면 된다. / iostream은 입출력을 구현된 파일.


// 이름이 안겹치는걸 위해서 namespace를 넣는다. hong::player << 식으로 

/********************************************************************
 * 네임스페이스 (Namespace)
 *
 * C++ 프로그램을 작성할 때 발생하는 이름이 중복되는 경우를 방지하는 방법
 ********************************************************************/

 // <namespace 공간정의>
 // 같은 이름의 중복이 되는 경우에도 네임스페이스가 다르다면 충돌로 처리하지 않음
namespace A
{
    int value;
}
namespace B
{
    int value;
}
int value;          // 네임스페이스를 지정하지 않음

// <namespace 사용>
// :: 콜론 앞에 네임스페이스 이름을 붙여 사용
void NamespaceUse1()
{
    A::value = 10;
    B::value = 20;
    ::value = 30;   // 네임스페이스를 지정하지 않은 경우 사용방법
}

// <using namespace>
// 현재 파일의 이후 코드부터 네임스페이스를 붙이지 않고 사용가능
namespace A
{
    int target;
}
using namespace A;
void NamespaceUse2()
{
    A::target = 20;
    target = 30;        // A::target = 30;
}


/// <summary>
/// Main 함수
/// 
/// 프로그램의 처음 시작지점이 되는 함수
/// 모든 C++ 프로그램은 반드시 하나의 Main 함수를 포함해야 함
/// </summary>
/// <returns></returns>

using namespace std; // 앞으로 지정하지 않으면 네임은 항상 스탠다드 라는뜻. 이후부턴 std:: 표시를 하지 않아도 스탠다드 안에 있는 기능을 쓸수있다.

int main()
{
    // <표준입출력>
   // 컴퓨터와 사용자가 소통하기 위한 수단
   // 이는 C++ 에서 iostream으로 구성되어 있음
   // 
   // cin : 콘솔 입력을 진행
   // cout : 콘솔 출력을 진행
   // endl : 줄바꿈
    
   /*
    std::cout << "Hello World!\n";// 이부분은 헬로 월드 콘솔로 보여주는 부분이다. 라는 식으로 주석을 달아준다. 의도를 설명하고 싶을때 달아준다.  std는 스탠다드 스탠다드는 마이크로 소프트 표준이다.
    std::cout << "1\n";// c out 이란 멘트는 뒤에 있는 문자를 출력시켜준다.
    std::cout << "2\n";//breaking point를 걸면 프로그램이 중간에 멈춘다.
    std::cout << "3" << std::endl;// std::endl; 은 \n과 같다. 
    std::cout << "4\n" 
        << "5" <<"6\n";// 세미 콜론은 끝이란 뜻. 빼먹지 말자// breaking point를 넣어도 명령문은 들어가지 않아서 멈추지 않는다.
        */
    cout << "입력해주세요 : ";
    string str;// str은 저장소 storage의 약자
        cin >> str;
    cout << "입력한 내용은 : " << str;

}
